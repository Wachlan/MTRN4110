import cv2
import numpy as np
import matplotlib.pyplot as plt
import copy
%matplotlib inline


MAZE_FILE_NAME = "../Maze.png"
ROBOT_FILE_NAME = "../Robot.png"
MAP_FILE_NAME = "../MapFound.txt"

def myround(n):
    return n + (1 - n) % 1

#Function to find the centre of a cornerstone, given a region of the image
def FindCentre(StartingRow, EndingRow, StartingCol, EndingCol, MazeCorners):
    Coordinates = []
    
    LowestRow = 0
    LowestCol = 0
    HighestRow = 0
    HighestCol = 0

    for row in range(StartingRow, EndingRow):
        for col in range(StartingCol, EndingCol):
            pixel = MazeCorners[row,col]
            if pixel[0] == 0 and pixel[1] == 0 and pixel[2] == 0:
                continue
            else:
                if row < LowestRow and LowestRow != 0:
                    LowestRow = row
                elif LowestRow == 0:
                    LowestRow = row
                    #EndingRow = StartingRow + 20
                if LowestCol == 0:
                    LowestCol = col
                    #EndingCol = StartingCol + 20
                if row > HighestRow:
                    HighestRow = row
                if col > HighestCol:
                    HighestCol = col
                
    CentreRow = int((LowestRow + HighestRow)/2)
    CentreCol = int((LowestCol + HighestCol)/2)
    
    #print(LowestRow)
    ##print(HighestRow)
    #print(LowestCol)
    #print(HighestCol)
    #print( )
    
    Coordinates.append(CentreRow)
    Coordinates.append(CentreCol)
    
    return Coordinates


def FindRobotLocation(StartingRow, EndingRow, StartingCol, EndingCol, MazeWalls):
    PixelCounter = 0

    for row in range(StartingRow, EndingRow):
        for col in range(StartingCol, EndingCol):
            pixel = MazeWalls[row,col]
            if pixel[0] == 0 and pixel[1] == 0 and pixel[2] == 0:
                continue
            else:
                PixelCounter = PixelCounter + 1

    return PixelCounter

def FindHeading(markerCorners):
    RobotFrontX = int(markerCorners[0][0][0][0])
    RobotFrontY = int(markerCorners[0][0][0][1])

    RobotBackX = int(markerCorners[0][0][2][0])
    RobotBackY = int(markerCorners[0][0][2][1])
    
    #print(RobotFrontX) 
    #print(RobotBackX)
    
    #print(RobotFrontY)
    #print(RobotBackY)


    
    XDifference = abs(RobotFrontX - RobotBackX)
    YDifference = abs(RobotFrontY - RobotBackY)
    
    if XDifference > YDifference:
        if RobotFrontX < RobotBackX:
            heading = 'W'
        elif RobotFrontX > RobotBackX:
            heading = 'E'
    elif YDifference > XDifference:
        if RobotFrontY > RobotBackY:
            heading = 'S'
        elif RobotFrontY < RobotBackY:
            heading = 'N'
            
    return heading
    
##############################################################################################################################  

MazeImgBGR = cv2.imread(MAZE_FILE_NAME)                                       #read image
MazeImgRGB = cv2.cvtColor(MazeImgBGR, cv2.COLOR_BGR2RGB)                  #get RGB version
MazeImgShowCornerstones = copy.deepcopy(MazeImgRGB)
MazeImgHSV = cv2.cvtColor(MazeImgBGR, cv2.COLOR_BGR2HSV)                  #get HSV version
plt.figure(figsize = (5,9))
plt.imshow(MazeImgRGB)                                                    #show RGB version



#HSVLow = np.array([135,188,125])
#HSVHigh = np.array([179,255,255])

HSVLow = np.array([139,190,101])
HSVHigh = np.array([153,255,255])


mask = cv2.inRange(MazeImgHSV, HSVLow, HSVHigh)
MazeCorners = cv2.bitwise_and(MazeImgRGB, MazeImgRGB, mask=mask)


kernel = np.ones((3,3), np.uint8)

for i in range(3):
    MazeCorners = cv2.erode(MazeCorners, kernel, iterations = i)
    MazeCorners = cv2.dilate(MazeCorners, kernel, iterations = i)

    

#plt.imshow(MazeCorners) 




#Find the centres of the cornerstones
TopLeft = FindCentre(0, 375, 0, 338, MazeCorners)
BottomLeft = FindCentre(375, 750, 0, 338, MazeCorners)
TopRight = FindCentre(0, 375, 1012, 1350, MazeCorners)
BottomRight = FindCentre(375, 750, 1012, 1350, MazeCorners)

print(TopLeft)
print(BottomLeft)
print(TopRight)
print(BottomRight)

cv2.rectangle(MazeImgShowCornerstones, (TopLeft[1]-10, TopLeft[0]-10), (TopLeft[1]+10, TopLeft[0]+10), (19,245,237), 2)
cv2.rectangle(MazeImgShowCornerstones, (BottomLeft[1]-10, BottomLeft[0]-10), (BottomLeft[1]+10, BottomLeft[0]+10), (19,245,237), 2)
cv2.rectangle(MazeImgShowCornerstones, (TopRight[1]-10, TopRight[0]-10), (TopRight[1]+10, TopRight[0]+10), (19,245,237), 2)
cv2.rectangle(MazeImgShowCornerstones, (BottomRight[1]-10, BottomRight[0]-10), (BottomRight[1]+10, BottomRight[0]+10), (19,245,237), 2)

plt.figure(figsize = (5,9))
plt.imshow(MazeImgShowCornerstones)



PerspectivePoints1 = np.float32([[TopLeft[1],TopLeft[0]],[BottomLeft[1],BottomLeft[0]],[TopRight[1],TopRight[0]],[BottomRight[1],BottomRight[0]]])
PerspectivePoints2 = np.float32([[0,0],[0,500],[900,0],[900,500]])

H = cv2.getPerspectiveTransform(PerspectivePoints1,PerspectivePoints2)

MazeImgTransformed = cv2.warpPerspective(MazeImgRGB, H, (900,500))

plt.figure(figsize = (5,9))
plt.imshow(MazeImgTransformed)






############################################################################################################################
#get internal walls
MazeImgBlueWalls = copy.deepcopy(MazeImgTransformed)
MazeWalls = copy.deepcopy(MazeImgTransformed)
MazeWallsHSV = cv2.cvtColor(MazeWalls, cv2.COLOR_RGB2HSV)                  #get HSV version

#plt.imshow(MazeWallsHSV)


#HSVLow = np.array([14,43,210])
#HSVHigh = np.array([30,118,255])


HSVLow = np.array([14,21,219])
HSVHigh = np.array([30,165,255])

mask = cv2.inRange(MazeWallsHSV, HSVLow, HSVHigh)
MazeWalls = cv2.bitwise_and(MazeWalls, MazeWalls, mask=mask)

#prepare kernel
#kernel = np.ones((3,3), np.uint8)


#make the walls blue
for row in range(500):
    for col in range(900):
        pixel = MazeWalls[row,col]
        if pixel[0] == 0 and pixel[1] == 0 and pixel[2] == 0:
            continue
        else:
            MazeImgBlueWalls[row,col] = [3,253,254]
    
   
plt.figure(figsize = (5,9))
plt.imshow(MazeImgBlueWalls)



############################################################################################################################
#get robot location


RobotInMaze = copy.deepcopy(MazeImgTransformed)
RobotInMazeHSV = cv2.cvtColor(RobotInMaze, cv2.COLOR_RGB2HSV)                  #get HSV version
RobotPosHeading = copy.deepcopy(MazeImgBlueWalls)                            #to plot the robot location and heading


#HSVLow = np.array([36,0,126])
#HSVHigh = np.array([136,125,220])

HSVLow = np.array([20,0,79])
HSVHigh = np.array([117,170,200])

mask = cv2.inRange(RobotInMazeHSV, HSVLow, HSVHigh)
RobotInMaze = cv2.bitwise_and(RobotInMaze, RobotInMaze, mask=mask)

#for i in range(5):
 #   MazeWalls = cv2.erode(MazeWalls, kernel, iterations = i)
   # MazeWalls = cv2.dilate(MazeWalls, kernel, iterations = i)


#plt.figure(figsize = (5,9))
#plt.imshow(RobotInMaze)


Location = []

Location.append(FindRobotLocation(10, 90, 10, 90, RobotInMaze))    #top left
Location.append(FindRobotLocation(410, 490, 10, 90, RobotInMaze))   #bottom left
Location.append(FindRobotLocation(10, 90, 810, 890, RobotInMaze))   #top right
Location.append(FindRobotLocation(410, 490, 810, 890, RobotInMaze)) #bottom right

HighestPixelCnt = 0
RobotIndex = 0

    
for index in range(len(Location)):    # iterating over Location list
    if Location[index] > HighestPixelCnt:
        HighestPixelCnt = Location[index]
        RobotIndex = index
    else:
        continue


    
#find centre of robot
if RobotIndex == 0:
    RobotCentre = FindCentre(10, 90, 10, 90, RobotInMaze)
    RobotMapRow = 1
    RobotMapCol = 0
elif RobotIndex == 1:
    RobotCentre = FindCentre(410, 490, 10, 90, RobotInMaze)
    RobotMapRow = 9
    RobotMapCol = 0
elif RobotIndex == 2:
    RobotCentre = FindCentre(10, 90, 810, 890, RobotInMaze)
    RobotMapRow = 1
    RobotMapCol = 8
elif RobotIndex == 3:
    RobotCentre = FindCentre(410, 490, 810, 890, RobotInMaze)
    RobotMapRow = 9
    RobotMapCol = 8
    
print("robot centre is ")
print(RobotCentre)


    
#represent location of the robot with a purple circle
cv2.circle(RobotPosHeading, (RobotCentre[1],RobotCentre[0]), 25, (155,1,171), 2)

##########################################################################################################
#detect robot Heading

RobotImgBGR = cv2.imread(ROBOT_FILE_NAME)                                       #read image
RobotImgRGB = cv2.cvtColor(RobotImgBGR, cv2.COLOR_BGR2RGB)                  #get RGB version                                             #show RGB version



#load predefined dictionary
dictionary = cv2.aruco.Dictionary_get(cv2.aruco.DICT_6X6_250)

#initialise detector parameters
parameters = cv2.aruco.DetectorParameters_create()

#detect marker
markerCorners, markerIds, rejectedCandidates = cv2.aruco.detectMarkers(RobotImgRGB, dictionary, parameters=parameters)

cv2.aruco.drawDetectedMarkers(RobotImgRGB, markerCorners, markerIds)

#print(markerCorners)
#print(markerIds)



heading = FindHeading(markerCorners)
print(heading)


font = cv2.FONT_ITALIC

#cv2.putText(MazeImgBlueWalls,".",(RobotCentre[0],RobotCentre[1]), font, 1, (0,0,255), 3, cv2.LINE_AA)

if heading == 'N':
    cv2.arrowedLine(RobotPosHeading, (RobotCentre[1],RobotCentre[0]+20), (RobotCentre[1],RobotCentre[0]-20), (155,1,171), (3), 8, 0, 0.5)
    RobotMapSymbol = '^'
if heading == 'S':
    cv2.arrowedLine(RobotPosHeading, (RobotCentre[1],RobotCentre[0]-20), (RobotCentre[1],RobotCentre[0]+20), (155,1,171), (3), 8, 0, 0.5)
    RobotMapSymbol = 'v'
if heading == 'E':
    cv2.arrowedLine(RobotPosHeading, (RobotCentre[1]-20,RobotCentre[0]), (RobotCentre[1]+20,RobotCentre[0]), (155,1,171), (3), 8, 0, 0.5)
    RobotMapSymbol = '>'
if heading == 'W':
    cv2.arrowedLine(RobotPosHeading, (RobotCentre[1]+20,RobotCentre[0]), (RobotCentre[1]-20,RobotCentre[0]), (155,1,171), (3), 8, 0, 0.5)
    #cv2.arrowedLine(RobotPosHeading, (457,874), (457,834), (155,1,171), (3), 8, 0, 0.5)
    
    #cv2.putText(MazeImgBlueWalls,"<",(RobotCentre[1],RobotCentre[0]), font, 1, (0,0,255), 3, cv2.LINE_AA)
    #cv2.putText(RobotPosHeading,"<",(874,457), font, 1, (0,0,255), 3, cv2.LINE_AA)

    print("plottead the arrow")
    RobotMapSymbol = '<'
    
#plot the image
plt.figure(figsize = (5,9))
plt.imshow(RobotPosHeading)


############################################################################################################################
#detect walls

MazeWallsGray = cv2.cvtColor(MazeWalls, cv2.COLOR_RGB2GRAY)
(thresh, MazeWallsBW) = cv2.threshold(MazeWallsGray, 128, 255, cv2.THRESH_BINARY_INV)
 


for i in range(1):
    MazeWallsBW = cv2.dilate(MazeWallsBW, kernel, iterations = i)
    MazeWallsBW = cv2.erode(MazeWallsBW, kernel, iterations = i)
    
    
HorizontalWalls = []
VerticalWalls = []

#plt.imshow(MazeWallsBW)


############################################################################################################################
#blob detector
#Setup SimpleBlobDetector parameters
params = cv2.SimpleBlobDetector_Params()

# Filter by Area.
params.filterByArea = True
params.minArea = 400
params.maxArea = 2000

params.minThreshold = 0
params.maxThreshold = 100

# Filter by Inertia
params.filterByInertia = True
params.minInertiaRatio = 0
params.maxInertiaRatio = 0.8

params.filterByConvexity = True
params.minConvexity = 0.5



# Create a detector with the parameters
detector = cv2.SimpleBlobDetector_create(params)

keypoints = detector.detect(MazeWallsBW)




#im_with_keypoints = cv2.drawKeypoints(MazeWallsGray, keypoints, np.array([]), (0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
# Show keypoints
#plt.imshow(im_with_keypoints)


w = 9
h = 10
WallMatrix = [[0 for x in range(w)] for y in range(h)] 

for i in range(len(keypoints)):
    
    #col = int(keypoints[i].pt[0] / 100)
    #row = int(keypoints[i].pt[1] / 50)

    
    col = int(np.floor(keypoints[i].pt[0] / 105))
    row = int(np.floor(keypoints[i].pt[1] / 55))
    
    
    
    #print(row)
    #print(col)
    WallMatrix[row][col] = 1
    
#print(WallMatrix)
#print(RobotMapRow)
#print(RobotMapCol)

############################################################################################################################
#write to file

f= open(MAP_FILE_NAME,"w+")
for row in range(11):  
    if row == 0 or row == 10:
        f.write(" --- --- --- --- --- --- --- --- --- ")
        f.write("\n")
        continue
        
    if row == RobotMapRow:
        for col in range(9):
            
            #print("in here")
            if col == 0 and RobotMapCol == 0:
                f.write("| " + RobotMapSymbol + " ")
            elif col == 0 and RobotMapCol != 0:
                f.write("|   ") 
            if col == 8 and RobotMapCol == 8:
                f.write(RobotMapSymbol + " |\n")
                continue
            elif col == 8 and RobotMapCol != 8:
                f.write("|\n")
                continue
            WallValue = WallMatrix[row-1][col]
            #print(col)
            if col == 7 and RobotMapCol == 8 and WallValue == 0:
                f.write("  ")
            elif WallValue == 0:
                f.write("    ")
            if col == 7 and RobotMapCol == 8 and WallValue == 1:
                f.write("| ")
            elif WallValue == 1:
                f.write("|   ")
                
    elif row%2 == 1:                           #if it's an odd row on the map, place vertical walls
        for col in range(9):
            if col == 0:
                f.write("|   ")                  #if starting column, place left boundary
                #col = col + 2
            if col == 8:
                f.write("|\n")
                continue
            WallValue = WallMatrix[row-1][col]
            #print(col)
            if WallValue == 0:
                f.write("    ")
            elif WallValue == 1:
                f.write("|   ")
            
    if row%2 == 0:                          #if it's an even row, place horizontal walls
        for col in range(10):
            if col == 0:
                f.write(" ")
            if col == 9:
                f.write("\n")
                continue
            WallValue = WallMatrix[row-1][col]
            if WallValue == 0:
                f.write("    ")
            elif WallValue == 1:
                f.write("--- ")


f.close()
