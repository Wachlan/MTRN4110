#include <fstream>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include <iomanip>
#include <string>
#include <cmath>
#include <math.h>
#include <ctgmath>
#include <queue>
#include <vector>
#include <bits/stdc++.h>


#define MAP_FILE_NAME "../../Map.txt"

struct Location
{
    std::string Heading;
    int Row;
    int Col;
};

void printArray(char map[11][38]);
void printHorizontal(int array[6][9]);
Location DetermineStartLocation(char map[11][38]);
void GetHorizontalWalls(char map[11][38], int HorizontalWall[6][9]);
void GetVerticalWalls(char map[11][38], int VerticalWall[5][10]);
void printVertical(int array[5][10]);
void FloodFill(int CellValues[5][9],  int HorizontalWall[6][9], int VerticalWall[5][10]);
void printCells(int array[5][9]);
//void FindPath(int CellValues[5][9], int HorizontalWall[6][9], int VerticalWall[5][10], char map[11][38], int StartingRow, int StartingCol, std::vector<int> &RowOrder, std::vector<int> &ColOrder);
//void FindPath(int CellValues[5][9], int HorizontalWall[6][9], int VerticalWall[5][10], char map[11][38], int StartingRow, int StartingCol, std::queue<int> &RowOrder, std::queue<int> &ColOrder);
//void FindPaths(int CellValues[5][9], int HorizontalWall[6][9], int VerticalWall[5][10], char map[11][38], int StartingRow, int StartingCol, std::queue<std::queue<int>> &KeepExploringRow, std::queue<std::queue<int>> &KeepExploringCol);
//void PrintPath(int CurrentValue, std::queue<int> &RowOrder, std::queue<int> &ColOrder, char map[11][38]);
std::queue<std::queue<int>> FindPaths(int CellValues[5][9], int HorizontalWall[6][9], int VerticalWall[5][10], char map[11][38], int StartingRow, int StartingCol, std::queue<std::queue<int>> &KeepExploringRow, std::queue<std::queue<int>> &KeepExploringCol);
void PrintPaths(int CellValues[5][9], std::queue<std::queue<int>> AllPaths, char map[11][38]);
void GetInstructions(int StartingRow, int StartingCol, std::string StartingHeading, std::queue<std::queue<int>> AllPaths, std::queue<std::queue<char>> &AllInstructions);
void GetBestInstructions(std::queue<std::queue<char>> AllInstructions, int StartingRow, int StartingCol, std::string StartingHeading);

int main()
{
    //declare input file stream
    std::ifstream inFile(MAP_FILE_NAME);
    
    //copy contents of inFile to map
    char map[11][38];

    for (int row = 0; row < 11; row++)
    {
        for (int col = 0; col < 38; col++)
        {
            inFile.get(map[row][col]);
        }
    }

    Location StartingLocation = DetermineStartLocation(map);
    //std::cout << StartingLocation.Row << "  " << StartingLocation.Col << "   " << StartingLocation.Heading << std::endl;

    std::cout << "Start - Reading map:" << std::endl;
    printArray(map);
    std::cout << "Done - Map read!" << std::endl;

    std::cout << "Start - Finding shortest paths:" << std::endl;

    //make a 2d array representing the location of horizontal walls
    int HorizontalWall[6][9] = {0};
    GetHorizontalWalls(map, HorizontalWall);
    //printHorizontal(HorizontalWall); 

    //make a 2d array representing the location of vertical walls
    int VerticalWall[5][10] = {0};
    GetVerticalWalls(map, VerticalWall);
    //printVertical(VerticalWall);

    //initialise cell values for flood fill algorithm
    int CellValues[5][9] = {0};

    for (int row = 0; row < 5; row++)
    {
        for (int col = 0; col < 9; col++)
        {
            CellValues[row][col] = 45;
        }

    }

    //printCells(CellValues);
    FloodFill(CellValues,  HorizontalWall, VerticalWall);


    std::queue<std::queue<int>> KeepExploringRow;
    std::queue<std::queue<int>> KeepExploringCol;

    
    std::queue<std::queue<int>> AllPaths = FindPaths(CellValues, HorizontalWall, VerticalWall, map, StartingLocation.Row, StartingLocation.Col, KeepExploringRow, KeepExploringCol);


    PrintPaths(CellValues, AllPaths, map);

    //A queue containing queues of the instruction list for the robot
    std::queue<std::queue<char>> AllInstructions;

    GetInstructions(StartingLocation.Row, StartingLocation.Col, StartingLocation.Heading, AllPaths, AllInstructions);

    GetBestInstructions(AllInstructions, StartingLocation.Row, StartingLocation.Col, StartingLocation.Heading);

    //std::cout << "reaching the end" << std::endl;

    return 0;
}





void printArray(char map[11][38])
{
    for (int row = 0; row < 11; row++)
    {
        for (int col = 0; col < 37; col++)
        {
            std::cout << (map[row][col]);
        }

        std::cout << std::endl;
    }
}



void printHorizontal(int array[6][9])
//void printHorizontal(int* array)
{
    for (int row = 0; row < 6; row++)
    {
        for (int col = 0; col < 9; col++)
        {
            std::cout << (array[row][col]);
        }

        std::cout << std::endl;
    }
}

void printCells(int array[5][9])
{
    for (int row = 0; row < 5; row++)
    {
        for (int col = 0; col < 9; col++)
        {
            std::cout << (array[row][col]) << " ";
        }

        std::cout << std::endl;
    }
}



Location DetermineStartLocation(char map[11][38])
{

    //std::string StartingHeading = " ";
    int StartingRow = 0;
    int StartingCol = 0;

    Location Start;

    for (int row = 0; row < 11; row++)
    {
        for (int col = 0; col < 38; col++)
        {
            char info = map[row][col];
            
            if (info == '^')
            {
                Start.Heading = "north";
                StartingRow = row;
                StartingCol = col;
            }
            else if (info == '>')
            {
                Start.Heading = "east";
                StartingRow = row;
                StartingCol = col;
            }
            else if (info == 'v')
            {
                Start.Heading = "south";
                StartingRow = row;
                StartingCol = col;
            }
            else if (info == '<')
            {
                Start.Heading = "west";
                StartingRow = row;
                StartingCol = col;
            }
        }

    }

    //the robot must start in 1 of 4 corners. Convert the map co-ordinates into row and column
    /*if (StartingRow == 1)
    {
        Start.Row = 1;
    }
    else if (StartingRow == 9)
    {
        Start.Row = 4;
    }

    if (StartingCol == 2)
    {
        Start.Row = 0;
    }
    else if (StartingCol == 34)
    {
        Start.Row = 8;
    }*/

    Start.Row = (StartingRow-1)/2;
    Start.Col = (StartingCol-2)/4;

    //std::cout << "Starting Heading: " << StartingHeading << std::endl;
    return Start;
}

void GetHorizontalWalls(char map[11][38], int HorizontalWall[6][9])
{

    //iterate through the map array
    for (int row = 0; row < 11; row++)
    {
        for (int col = 0; col < 34; col++)
        {
            if (map[row][col] == '-' && map[row][col+1] == '-' && map[row][col+2] == '-')
            {
                 //if there is a horizontal wall, convert the co-ordinates to the horizontal array and make 1
                 int HorizontalWallCol = nearbyint((0.25454545)*(col+1) - (0.509090909));
                 int HorizontalWallRow = nearbyint((0.5)*row);

                 HorizontalWall[HorizontalWallRow][HorizontalWallCol] = 1;

            }
        }
    }
    

}

void GetVerticalWalls(char map[11][38], int VerticalWall[5][10])
{
    //iterate through the map array
    for (int row = 0; row < 11; row++)
    {
        for (int col = 0; col < 37; col++)
        {
            if (map[row][col] == '|')
            {
                 //if there is a horizontal wall, convert the co-ordinates to the horizontal array and make 1
                 int VerticalWallCol = nearbyint(0.25*col);
                 int VerticalWallRow = nearbyint(0.5*row - 0.5);

                 VerticalWall[VerticalWallRow][VerticalWallCol] = 1;

            }
        }
    }
}



void printVertical(int array[5][10])
//void printHorizontal(int* array)
{
    for (int row = 0; row < 5; row++)
    {
        for (int col = 0; col < 10; col++)
        {
            std::cout << (array[row][col]);
        }

        std::cout << std::endl;
    }
}


void FloodFill(int CellValues[5][9],  int HorizontalWall[6][9], int VerticalWall[5][10])
{

    //Goal cell value = 0
    CellValues[2][4] = 0;

    //Current explroed value = 0
    int CurrentExploredValue = 0;

    //set maze changed to 1
    int MazeChanged = 1;

    while (MazeChanged != 0)
    {
        MazeChanged = 0;

        for (int row = 0; row < 5; row++)
        {
            for (int col = 0; col < 9; col++)
            {
                if (CellValues[row][col] == CurrentExploredValue)
                {
                    //north
                    if (HorizontalWall[row][col] == 0) //if the wall to the north doesn't exist
                    {
                        if (CellValues[row-1][col] == 45)  //if the cell value to the north is 45
                        {
                            CellValues[row-1][col] = CellValues[row][col] + 1; //change the cell value to the current value + 1
                            MazeChanged = 1;
                        }
                    }

                    //south
                    if (HorizontalWall[row+1][col] == 0) //if the wall to the south doesn't exist
                    {
                        if (CellValues[row+1][col] == 45) //if the cell value to the south is 45
                        {
                            CellValues[row+1][col] = CellValues[row][col] + 1; //change cell value to the current value + 1
                            MazeChanged = 1;
                        }
                    }

                    //east
                    if (VerticalWall[row][col+1] == 0) //if the wall to the east doesn't exist
                    {
                        if (CellValues[row][col+1] == 45) //if the cell value to the east is 45
                        {
                            CellValues[row][col+1] = CellValues[row][col] + 1; //change cell value to the current value + 1
                            MazeChanged = 1;
                        }
                    }

                    //west
                    if (VerticalWall[row][col] == 0) //if the wall to the west doesn't exist
                    {
                        if (CellValues[row][col-1] == 45) //if the cell value to the west is 45
                        {
                            CellValues[row][col-1] = CellValues[row][col] + 1; //change cell value to the current value + 1
                            MazeChanged = 1;
                        }
                    }



                }
            }

        
        }

        CurrentExploredValue = CurrentExploredValue + 1;
        //printCells(CellValues);
    }

}



std::queue<std::queue<int>> FindPaths(int CellValues[5][9], int HorizontalWall[6][9], int VerticalWall[5][10], char map[11][38], int StartingRow, int StartingCol, std::queue<std::queue<int>> &KeepExploringRow, std::queue<std::queue<int>> &KeepExploringCol)
//void FindPaths(int CellValues[5][9], int HorizontalWall[6][9], int VerticalWall[5][10], char map[11][38], int StartingRow, int StartingCol, std::queue<std::queue<int>> &KeepExploringRow, std::queue<std::queue<int>> &KeepExploringCol)
{

    std::queue<std::queue<int>> AllPaths;

    //int CurrentValue = CellValues[StartingRow][StartingCol];
    int row = StartingRow;
    int col = StartingCol;

    std::queue<int> RowOrder;
    std::queue<int> ColOrder;


    RowOrder.push(row);
    ColOrder.push(col);


    KeepExploringRow.push(RowOrder);
    KeepExploringCol.push(ColOrder);


    while (!KeepExploringRow.empty())
    //for (int i = 0; i < 20; i++)
    {
        std::queue<int> RowOrder = KeepExploringRow.front();
        std::queue<int> ColOrder = KeepExploringCol.front();

        KeepExploringRow.pop();
        KeepExploringCol.pop();

        int CurrentValue = CellValues[RowOrder.back()][ColOrder.back()];


        if (CurrentValue == 0)
        {
            AllPaths.push(RowOrder);
            AllPaths.push(ColOrder);
            continue;
            //std::cout << "path pushd onto all paths" << std::endl;
        }

        else
        {
            row = RowOrder.back();
            col = ColOrder.back();
        }



    while (CurrentValue != 0) //keep going until the centre is reached
    //for (int i = 0; i < 20; i++)
    {

        /*std::cout<<"Current Value: "<< CurrentValue << std::endl;
        std::cout<<"row: "<< row << std::endl;
        std::cout<<"col: "<< col << std::endl;

        if (CurrentValue == 0)
        {
            AllPaths.push(RowOrder);
            AllPaths.push(ColOrder);
            break;
            std::cout << "path pushed onto all paths" << std::endl;
        }*/

        int north = 0;
        int south = 0;
        int east = 0;
        int west = 0;


        //north
        if (HorizontalWall[row][col] == 0) //if the wall to the north doesn't exist
        {
            if (CellValues[row-1][col] == (CurrentValue-1))  //if the cell value to the north is one less than current
            {
                north = 1;
                
            }
        }

        //south
        if (HorizontalWall[row+1][col] == 0) //if the wall to the south doesn't exist
        {
            if (CellValues[row+1][col] == (CurrentValue-1)) //if the cell value to the south is one less than current
            {
                south = 1;
        
            }
        }

        //east
        if (VerticalWall[row][col+1] == 0) //if the wall to the east doesn't exist
        {
            if (CellValues[row][col+1] == (CurrentValue-1)) //if the cell value to the east is one less than current
            {
                east = 1;
                            
            }
        }

        //west
        if (VerticalWall[row][col] == 0) //if the wall to the west doesn't exist
        {
            if (CellValues[row][col-1] == (CurrentValue-1)) //if the cell value to the west is one less than current
            {
                west = 1;
        
            }
        }
        
        if (north + south + east + west == 1) //only 1 direction to go- don't duplicate
        {
            if (north == 1)
            {
                RowOrder.push(row-1);
                ColOrder.push(col);

                //KeepExploringRow.push(RowOrder);
                //KeepExploringCol.push(ColOrder);
                CurrentValue = CurrentValue - 1;
                row = row - 1;
                continue;
            }

            if (south == 1)
            {
                RowOrder.push(row+1);
                ColOrder.push(col);

                //KeepExploringRow.push(RowOrder);
                //KeepExploringCol.push(ColOrder);
                //CurrentValue = CurrentValue - 1;
                row = row + 1;
                //continue;
            }

            if (east == 1)
            {
                RowOrder.push(row);
                ColOrder.push(col+1);

                //KeepExploringRow.push(RowOrder);
                //KeepExploringCol.push(ColOrder);
                //CurrentValue = CurrentValue - 1;
                col = col + 1;
                //continue;
            }

            if (west == 1)
            {
                RowOrder.push(row);
                ColOrder.push(col-1);

                //KeepExploringRow.push(RowOrder);
                //KeepExploringCol.push(ColOrder);
                //CurrentValue = CurrentValue - 1;
                col = col - 1;
                //continue;
            }

            CurrentValue = CurrentValue - 1;
            continue;

        }

        //multiple paths; need to duplicate path
        if (north + south + east + west > 1)
        {
            std::queue<int> NewRowPath;
            std::queue<int> NewColPath;

            if (north == 1)
            {
                //std::queue<int> NewRowPath = RowOrder;
                //std::queue<int> NewColPath = ColOrder;

                NewRowPath = RowOrder;
                NewColPath = ColOrder;

                NewRowPath.push(row-1);
                NewColPath.push(col);

                KeepExploringRow.push(NewRowPath);
                KeepExploringCol.push(NewColPath);
                
                //std::cout<<"Duplicate path created" << std::endl;
            }

            if (south == 1)
            {
                //std::queue<int> NewRowPath = RowOrder;
                //std::queue<int> NewColPath = ColOrder;

                NewRowPath = RowOrder;
                NewColPath = ColOrder;

                NewRowPath.push(row+1);
                NewColPath.push(col);

                KeepExploringRow.push(NewRowPath);
                KeepExploringCol.push(NewColPath);

                //std::cout<<"Duplicate path created" << std::endl;
            }

            if (east == 1)
            {
                //std::queue<int> NewRowPath = RowOrder;
                //std::queue<int> NewColPath = ColOrder;

                NewRowPath = RowOrder;
                NewColPath = ColOrder;

                NewRowPath.push(row);
                NewColPath.push(col+1);

                KeepExploringRow.push(NewRowPath);
                KeepExploringCol.push(NewColPath);

                //std::cout<<"Duplicate path created" << std::endl;
            }

            if (west == 1)
            {
                //std::queue<int> NewRowPath = RowOrder;
                //std::queue<int> NewColPath = ColOrder;

                NewRowPath = RowOrder;
                NewColPath = ColOrder;

                NewRowPath.push(row);
                NewColPath.push(col-1);

                KeepExploringRow.push(NewRowPath);
                KeepExploringCol.push(NewColPath);

                //std::cout<<"Duplicate path created" << std::endl;
            }

            CurrentValue = CurrentValue - 1;
            break;

        }

    }

        //AllPaths.push(RowOrder);
        //AllPaths.push(ColOrder);
        if (CurrentValue == 0)
        {
            AllPaths.push(RowOrder);
            AllPaths.push(ColOrder);
            //std::cout << "path pushd onto all paths" << std::endl;

            continue;
        }
    }


    return AllPaths;
}




//void PrintPath(int CurrentValue, std::queue<std::queue<int>> AllPaths, char map[11][38])
void PrintPaths(int CellValues[5][9], std::queue<std::queue<int>> AllPaths, char map[11][38])
{
    int counter = 1;

    //std::cout << "print paths called" <<std::endl;
    while (!AllPaths.empty())
    //for(int i = 0; i < 5; i++)
    {

    std::cout << "path - " << counter << ":" << std::endl;
    counter = counter + 1;

    std::queue<int> RowOrder = AllPaths.front();
    AllPaths.pop();
    std::queue<int> ColOrder = AllPaths.front();
    AllPaths.pop();

    //get rid of the first number to display the robot
    RowOrder.pop();
    ColOrder.pop();

    int CurrentValue = CellValues[RowOrder.front()][ColOrder.front()];
    //std::cout << "Current value: " << CurrentValue <<std::endl;


    char path1[11][38];
    std::copy(&map[0][0], &map[0][0]+11*38, &path1[0][0]);

    //now the paths cell values are stored
    while (!RowOrder.empty())
    {
        //std::cout << "reached while loop" << std::endl;

        int RowTop = RowOrder.front();
        int ColTop = ColOrder.front();

        //std::cout << "RowTop: " << RowTop << "ColTop: " << ColTop << std::endl;

        //convert this back to co-ordinates on the map
        int MapRow = 2*RowTop + 1;
        int MapCol = 4*ColTop + 2;


        if (CurrentValue >= 20 && CurrentValue < 30)
        {
            int ones = CurrentValue % 10;
            int tens = 2;
            path1[MapRow][MapCol] = (char)tens + '0';
            path1[MapRow][MapCol+1] = (char)ones + '0';
        }
        else if (CurrentValue >= 10 && CurrentValue < 20)
        {
            int ones = CurrentValue % 10;
            int tens = 1;
            path1[MapRow][MapCol] = (char)(tens + '0');
            path1[MapRow][MapCol+1] = (char)(ones + '0');
        }
        else if (CurrentValue >= 0)
        {
            path1[MapRow][MapCol] = (char)(CurrentValue + '0');
        }
        

        CurrentValue = CurrentValue - 1;
        RowOrder.pop();
        ColOrder.pop();

    }

    printArray(path1);
    //std::cout << "paths printed" <<std::endl;
    }

    std::cout << "Done - " << counter-1 << " shortest paths found!" << std::endl;
    return;
}



void GetInstructions(int StartingRow, int StartingCol, std::string StartingHeading, std::queue<std::queue<int>> AllPaths, std::queue<std::queue<char>> &AllInstructions)
{
    //A queue containing queues of the instruction list for the robot
    //std::queue<std::queue<char>> AllInstructions;
    //std::cout << "Getting instructions" << std::endl;

    while (!AllPaths.empty())
    //for(int i = 0; i < 1; i++)
    {
        std::queue<int> RowOrder = AllPaths.front();
        AllPaths.pop();
        std::queue<int> ColOrder = AllPaths.front();
        AllPaths.pop();

        //get rid of the first number because that is the starting position
        RowOrder.pop();
        ColOrder.pop();

        int CurrentRow = StartingRow;
        int CurrentCol = StartingCol;
        std::string Heading = StartingHeading;

                
        std::queue<char> Instructions;

        while (!RowOrder.empty())
        //for(int i = 0; i < 15; i++)
        {
            /*std::cout << "Current Row: " << CurrentRow << std::endl;
            std::cout << "Current Col: " << CurrentCol << std::endl;
            std::cout << "Heading: " << Heading << std::endl;

            std::cout << "Next row: " << RowOrder.front() << std::endl;
            std::cout << "Next col: " << ColOrder.front() << std::endl;

            std::cout << std::endl;*/


            if (Heading == "north")
            {
                if (RowOrder.front() == CurrentRow - 1)
                {
                    Instructions.push('F');
                    CurrentRow = CurrentRow - 1;
                    Heading = "north";
                    RowOrder.pop();
                    ColOrder.pop();
                    continue;
                }

                if (ColOrder.front() == CurrentCol + 1)
                {
                    Instructions.push('R');
                    Heading = "east";
                    //RowOrder.pop();
                    //ColOrder.pop();
                    continue;
                }

                if (ColOrder.front() == CurrentCol - 1)
                {
                    Instructions.push('L');
                    Heading = "west";
                    //RowOrder.pop();
                    //ColOrder.pop();
                    continue;
                }
            }


            if (Heading == "south")
            {
                if (RowOrder.front() == CurrentRow + 1)
                {
                    Instructions.push('F');
                    CurrentRow = CurrentRow + 1;
                    Heading = "south";
                    RowOrder.pop();
                    ColOrder.pop();
                    continue;
                }

                if (ColOrder.front() == CurrentCol + 1)
                {
                    Instructions.push('L');
                    Heading = "east";
                    //RowOrder.pop();
                    //ColOrder.pop();
                    continue;
                }

                if (ColOrder.front() == CurrentCol - 1)
                {
                    Instructions.push('R');
                    Heading = "west";
                    //RowOrder.pop();
                    //ColOrder.pop();
                    continue;
                }
            }

            if (Heading == "east")
            {

                if (ColOrder.front() == CurrentCol + 1)
                {
                    Instructions.push('F');
                    CurrentCol = CurrentCol + 1;
                    Heading = "east";
                    RowOrder.pop();
                    ColOrder.pop();
                    continue;
                }

                if (RowOrder.front() == CurrentRow - 1)
                {
                    Instructions.push('L');
                    Heading = "north";
                    //RowOrder.pop();
                    //ColOrder.pop();
                    continue;
                }

                if (RowOrder.front() == CurrentRow + 1)
                {
                    Instructions.push('R');
                    Heading = "south";
                    //RowOrder.pop();
                    //ColOrder.pop();
                    continue;
                }
            }

            if (Heading == "west")
            {

                if (ColOrder.front() == CurrentCol - 1)
                {
                    Instructions.push('F');
                    CurrentCol = CurrentCol - 1;
                    Heading = "west";
                    RowOrder.pop();
                    ColOrder.pop();
                    continue;
                }

               if (RowOrder.front() == CurrentRow - 1)
                {
                    Instructions.push('R');
                    Heading = "north";
                    //RowOrder.pop();
                    //ColOrder.pop();
                    continue;
                }

                if (RowOrder.front() == CurrentRow + 1)
                {
                    Instructions.push('L');
                    Heading = "south";
                    //RowOrder.pop();
                    //ColOrder.pop();
                    continue;
                }
            }


        }

        AllInstructions.push(Instructions);
        //std::cout << "Instructions pushed on" << std::endl;
        continue;


        


    }


    return;
}


void GetBestInstructions(std::queue<std::queue<char>> AllInstructions, int StartingRow, int StartingCol, std::string StartingHeading)
{
    //std::cout << "reaching here" << std::endl;
    //std::cout << StartingRow << StartingCol << StartingHeading;
    std::queue<char> BestInstructions;
    int ShortestLength = 100;
    int size = 0;
    std::string FilePath = "";

    while (!AllInstructions.empty())
    {

        std::queue<char> Instructions = AllInstructions.front();
        AllInstructions.pop();

        size = Instructions.size();

        if (size < ShortestLength)
        {
            ShortestLength = size;
            BestInstructions = Instructions;
        }


    }

    char Heading;
    if (StartingHeading == "north")
    {
        Heading = 'N';
    }
    if (StartingHeading == "south")
    {
        Heading = 'S';
    }
    if (StartingHeading == "east")
    {
        Heading = 'E';
    }
    if (StartingHeading == "west")
    {
        Heading = 'W';
    }

    std::cout << "steps: " << size << " - " << StartingRow << StartingCol << Heading;
    //FilePath[0] = static_cast<char>(StartingRow)+'0';
    //FilePath[1] = static_cast<char>(StartingCol)+'0';
    //FilePath[2] = Heading;

    FilePath.append(std::to_string(StartingRow));
    FilePath.append(std::to_string(StartingCol));
    FilePath.push_back(Heading);


    //std::cout << (char)StartingRow << (char)StartingCol << Heading << std::endl;
    //std::cout << FilePath[0] << FilePath[1] << std::endl;
    //std::cout << FilePath << std::endl;


    //int counter = 3;

    while (!BestInstructions.empty())
    {
        char step = BestInstructions.front();
        std::cout << step;
        //FilePath[counter] = step;
        //counter = counter + 1;
        FilePath.push_back(step);

        BestInstructions.pop();
    }

    std::cout << std::endl;

    std::cout << "Done - Shortest path with the least turns found!" << std::endl;

    std::cout << "Start - Writing path plan to PathPlanFound.txt" << std::endl;

    //std::cout << FilePath[0] << FilePath[1] << FilePath[2] << FilePath[3] << FilePath[4] << FilePath[5] << std::endl;
    //std::cout << FilePath << std::endl;
    std::ofstream out("PathPlanFound.txt");
    out << FilePath;
    out.close();

    std::cout << "Done - Path plan written to PathPlanFound.txt" << std::endl;

    
    
    return;
}
